
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  SUPERVISOR
  ADMIN
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  name          String
  employeeId    String    @unique
  email         String    @unique
  phone         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(EMPLOYEE)
  supervisorId  String?
  
  // Relations
  supervisor     User?           @relation("UserSupervisor", fields: [supervisorId], references: [id])
  employees      User[]          @relation("UserSupervisor")
  leaveRequests  LeaveRequest[]
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LeaveRequest {
  id        String      @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}
