generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  employeeId    String         @unique
  firstName     String
  middleName    String?
  lastName      String
  iqamaNo       String?        @unique
  storeCode     String?
  nationality   String?
  gosiType      GosiType?
  jobTitle      String?
  email         String         @unique
  phone         String?
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(EMPLOYEE)
  supervisorId  String?
  accounts      Account[]
  sessions      Session[]
  leaveRequests LeaveRequest[]
  supervisor    User?          @relation("UserSupervisor", fields: [supervisorId], references: [id])
  employees     User[]         @relation("UserSupervisor")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LeaveRequest {
  id        String      @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

enum Role {
  EMPLOYEE
  SUPERVISOR
  ADMIN
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GosiType {
  SAUDI
  NON_SAUDI
}
